
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ManagerScalarFieldEnum = {
  manager_id: 'manager_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone_number: 'phone_number',
  role: 'role',
  password_hash: 'password_hash',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CounterpartyScalarFieldEnum = {
  counterparty_id: 'counterparty_id',
  name: 'name',
  counterparty_type: 'counterparty_type',
  responsible_manager_id: 'responsible_manager_id',
  phone: 'phone',
  email: 'email',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UnitScalarFieldEnum = {
  unit_id: 'unit_id',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.WarehouseScalarFieldEnum = {
  warehouse_id: 'warehouse_id',
  name: 'name',
  location: 'location',
  created_at: 'created_at'
};

exports.Prisma.ProductScalarFieldEnum = {
  product_id: 'product_id',
  name: 'name',
  description: 'description',
  price: 'price',
  unit_id: 'unit_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductStockScalarFieldEnum = {
  product_stock_id: 'product_stock_id',
  product_id: 'product_id',
  warehouse_id: 'warehouse_id',
  quantity: 'quantity',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServiceScalarFieldEnum = {
  service_id: 'service_id',
  name: 'name',
  description: 'description',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SaleStatusTypeScalarFieldEnum = {
  sale_status_id: 'sale_status_id',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.SaleScalarFieldEnum = {
  sale_id: 'sale_id',
  counterparty_id: 'counterparty_id',
  responsible_manager_id: 'responsible_manager_id',
  sale_date: 'sale_date',
  status: 'status',
  deferred_payment_date: 'deferred_payment_date',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SaleProductScalarFieldEnum = {
  sale_id: 'sale_id',
  product_id: 'product_id',
  quantity: 'quantity',
  created_at: 'created_at'
};

exports.Prisma.SaleServiceScalarFieldEnum = {
  sale_id: 'sale_id',
  service_id: 'service_id',
  created_at: 'created_at'
};

exports.Prisma.FunnelScalarFieldEnum = {
  funnel_id: 'funnel_id',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.FunnelStageScalarFieldEnum = {
  funnel_stage_id: 'funnel_stage_id',
  name: 'name',
  funnel_id: 'funnel_id',
  order: 'order',
  created_at: 'created_at'
};

exports.Prisma.SubProjectFunnelScalarFieldEnum = {
  sub_project_funnel_id: 'sub_project_funnel_id',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.SubProjectFunnelStageScalarFieldEnum = {
  sub_project_funnel_stage_id: 'sub_project_funnel_stage_id',
  name: 'name',
  sub_project_funnel_id: 'sub_project_funnel_id',
  order: 'order',
  created_at: 'created_at'
};

exports.Prisma.SubProjectStatusTypeScalarFieldEnum = {
  sub_project_status_id: 'sub_project_status_id',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.ProjectScalarFieldEnum = {
  project_id: 'project_id',
  name: 'name',
  description: 'description',
  main_responsible_manager_id: 'main_responsible_manager_id',
  counterparty_id: 'counterparty_id',
  funnel_id: 'funnel_id',
  funnel_stage_id: 'funnel_stage_id',
  forecast_amount: 'forecast_amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProjectManagerScalarFieldEnum = {
  project_id: 'project_id',
  manager_id: 'manager_id',
  created_at: 'created_at'
};

exports.Prisma.SubProjectScalarFieldEnum = {
  subproject_id: 'subproject_id',
  name: 'name',
  description: 'description',
  project_id: 'project_id',
  status: 'status',
  cost: 'cost',
  sub_project_funnel_id: 'sub_project_funnel_id',
  sub_project_funnel_stage_id: 'sub_project_funnel_stage_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TaskScalarFieldEnum = {
  task_id: 'task_id',
  title: 'title',
  description: 'description',
  responsible_manager_id: 'responsible_manager_id',
  creator_manager_id: 'creator_manager_id',
  project_id: 'project_id',
  subproject_id: 'subproject_id',
  due_date: 'due_date',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProjectProductScalarFieldEnum = {
  project_product_id: 'project_product_id',
  project_id: 'project_id',
  product_id: 'product_id',
  quantity: 'quantity',
  created_at: 'created_at'
};

exports.Prisma.ProjectServiceScalarFieldEnum = {
  project_service_id: 'project_service_id',
  project_id: 'project_id',
  service_id: 'service_id',
  created_at: 'created_at'
};

exports.Prisma.SubProjectProductScalarFieldEnum = {
  subproject_product_id: 'subproject_product_id',
  subproject_id: 'subproject_id',
  product_id: 'product_id',
  quantity: 'quantity',
  created_at: 'created_at'
};

exports.Prisma.SubProjectServiceScalarFieldEnum = {
  subproject_service_id: 'subproject_service_id',
  subproject_id: 'subproject_id',
  service_id: 'service_id',
  created_at: 'created_at'
};

exports.Prisma.ProjectCommentScalarFieldEnum = {
  comment_id: 'comment_id',
  project_id: 'project_id',
  manager_id: 'manager_id',
  content: 'content',
  file_name: 'file_name',
  file_type: 'file_type',
  file_url: 'file_url',
  created_at: 'created_at'
};

exports.Prisma.SubProjectCommentScalarFieldEnum = {
  comment_id: 'comment_id',
  subproject_id: 'subproject_id',
  manager_id: 'manager_id',
  content: 'content',
  file_name: 'file_name',
  file_type: 'file_type',
  file_url: 'file_url',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ManagerRole = exports.$Enums.ManagerRole = {
  admin: 'admin',
  head: 'head',
  manager: 'manager'
};

exports.CounterpartyType = exports.$Enums.CounterpartyType = {
  INDIVIDUAL: 'INDIVIDUAL',
  LEGAL_ENTITY: 'LEGAL_ENTITY'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  new: 'new',
  in_progress: 'in_progress',
  blocked: 'blocked',
  done: 'done',
  cancelled: 'cancelled'
};

exports.Prisma.ModelName = {
  Manager: 'Manager',
  Counterparty: 'Counterparty',
  Unit: 'Unit',
  Warehouse: 'Warehouse',
  Product: 'Product',
  ProductStock: 'ProductStock',
  Service: 'Service',
  SaleStatusType: 'SaleStatusType',
  Sale: 'Sale',
  SaleProduct: 'SaleProduct',
  SaleService: 'SaleService',
  Funnel: 'Funnel',
  FunnelStage: 'FunnelStage',
  SubProjectFunnel: 'SubProjectFunnel',
  SubProjectFunnelStage: 'SubProjectFunnelStage',
  SubProjectStatusType: 'SubProjectStatusType',
  Project: 'Project',
  ProjectManager: 'ProjectManager',
  SubProject: 'SubProject',
  Task: 'Task',
  ProjectProduct: 'ProjectProduct',
  ProjectService: 'ProjectService',
  SubProjectProduct: 'SubProjectProduct',
  SubProjectService: 'SubProjectService',
  ProjectComment: 'ProjectComment',
  SubProjectComment: 'SubProjectComment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
