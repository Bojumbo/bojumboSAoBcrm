import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
const prisma = new PrismaClient();
async function main() {
    console.log('üå± Starting database seeding...');
    // Clear existing data
    await prisma.$transaction([
        prisma.subProjectService.deleteMany(),
        prisma.subProjectProduct.deleteMany(),
        prisma.subProjectComment.deleteMany(),
        prisma.projectService.deleteMany(),
        prisma.projectProduct.deleteMany(),
        prisma.projectComment.deleteMany(),
        prisma.task.deleteMany(),
        prisma.subProject.deleteMany(),
        prisma.saleService.deleteMany(),
        prisma.saleProduct.deleteMany(),
        prisma.sale.deleteMany(),
        prisma.project.deleteMany(),
        prisma.projectManager.deleteMany(),
        prisma.funnelStage.deleteMany(),
        prisma.funnel.deleteMany(),
        prisma.productStock.deleteMany(),
        prisma.product.deleteMany(),
        prisma.service.deleteMany(),
        prisma.unit.deleteMany(),
        prisma.warehouse.deleteMany(),
        prisma.counterparty.deleteMany(),
        prisma.manager.deleteMany(),
    ]);
    console.log('üóëÔ∏è  Cleared existing data');
    // Create managers
    const adminPassword = await bcrypt.hash('admin123', 10);
    const managerPassword = await bcrypt.hash('manager123', 10);
    const managers = await Promise.all([
        prisma.manager.create({
            data: {
                first_name: 'Admin',
                last_name: 'User',
                email: 'admin@example.com',
                phone_number: '000-000-0000',
                role: 'admin',
                password_hash: adminPassword,
            },
        }),
        prisma.manager.create({
            data: {
                first_name: '–Ü–≤–∞–Ω',
                last_name: '–ü–µ—Ç—Ä–æ–≤',
                email: 'ivan.p@example.com',
                phone_number: '123-456-7890',
                role: 'head',
                password_hash: managerPassword,
            },
        }),
        prisma.manager.create({
            data: {
                first_name: '–ú–∞—Ä—ñ—è',
                last_name: '–Ü–≤–∞–Ω–æ–≤–∞',
                email: 'maria.i@example.com',
                phone_number: '098-765-4321',
                role: 'manager',
                password_hash: managerPassword,
            },
        }),
        prisma.manager.create({
            data: {
                first_name: '–û–ª–µ–≥',
                last_name: '–°–∏–¥–æ—Ä–µ–Ω–∫–æ',
                email: 'oleg.s@example.com',
                phone_number: '111-222-3333',
                role: 'manager',
                password_hash: managerPassword,
            },
        }),
        prisma.manager.create({
            data: {
                first_name: '–ê–Ω–Ω–∞',
                last_name: '–ö–æ–≤–∞–ª–µ–Ω–∫–æ',
                email: 'anna.k@example.com',
                phone_number: '444-555-6666',
                role: 'head',
                password_hash: managerPassword,
            },
        }),
    ]);
    console.log('üë• Created managers');
    // Set up supervisor relationships
    await prisma.manager.update({
        where: { manager_id: managers[1].manager_id }, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
        data: {
            supervisors: {
                connect: { manager_id: managers[0].manager_id } // Admin
            }
        }
    });
    await prisma.manager.update({
        where: { manager_id: managers[2].manager_id }, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
        data: {
            supervisors: {
                connect: { manager_id: managers[1].manager_id } // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
            }
        }
    });
    await prisma.manager.update({
        where: { manager_id: managers[3].manager_id }, // –û–ª–µ–≥ –°–∏–¥–æ—Ä–µ–Ω–∫–æ
        data: {
            supervisors: {
                connect: [
                    { manager_id: managers[1].manager_id }, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
                    { manager_id: managers[4].manager_id } // –ê–Ω–Ω–∞ –ö–æ–≤–∞–ª–µ–Ω–∫–æ
                ]
            }
        }
    });
    await prisma.manager.update({
        where: { manager_id: managers[4].manager_id }, // –ê–Ω–Ω–∞ –ö–æ–≤–∞–ª–µ–Ω–∫–æ
        data: {
            supervisors: {
                connect: { manager_id: managers[0].manager_id } // Admin
            }
        }
    });
    console.log('üîó Set up supervisor relationships');
    // Create units
    const units = await Promise.all([
        prisma.unit.create({ data: { name: '—à—Ç.' } }),
        prisma.unit.create({ data: { name: '–∫–≥' } }),
        prisma.unit.create({ data: { name: '—É–ø.' } }),
    ]);
    console.log('üì¶ Created units');
    // Create warehouses
    const warehouses = await Promise.all([
        prisma.warehouse.create({
            data: {
                name: '–û—Å–Ω–æ–≤–Ω–∏–π —Å–∫–ª–∞–¥',
                location: '–ö–∏—ó–≤, –≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 1'
            }
        }),
        prisma.warehouse.create({
            data: {
                name: '–°–∫–ª–∞–¥ ‚Ññ2',
                location: '–õ—å–≤—ñ–≤, –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞, 5'
            }
        }),
    ]);
    console.log('üè≠ Created warehouses');
    // Create products
    const products = await Promise.all([
        prisma.product.create({
            data: {
                name: '–ù–æ—É—Ç–±—É–∫ Pro 15',
                description: '–ü–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤',
                price: 1500.00,
                unit_id: units[0].unit_id,
            }
        }),
        prisma.product.create({
            data: {
                name: '–ú–∏—à–∞ Wireless X',
                description: '–ï—Ä–≥–æ–Ω–æ–º—ñ—á–Ω–∞ –±–µ–∑–¥—Ä–æ—Ç–æ–≤–∞ –º–∏—à–∞',
                price: 50.00,
                unit_id: units[0].unit_id,
            }
        }),
    ]);
    console.log('üíª Created products');
    // Create product stocks
    await Promise.all([
        prisma.productStock.create({
            data: {
                product_id: products[0].product_id,
                warehouse_id: warehouses[0].warehouse_id,
                quantity: 10
            }
        }),
        prisma.productStock.create({
            data: {
                product_id: products[1].product_id,
                warehouse_id: warehouses[0].warehouse_id,
                quantity: 50
            }
        }),
        prisma.productStock.create({
            data: {
                product_id: products[0].product_id,
                warehouse_id: warehouses[1].warehouse_id,
                quantity: 5
            }
        }),
    ]);
    console.log('üìä Created product stocks');
    // Create services
    const services = await Promise.all([
        prisma.service.create({
            data: {
                name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –ü–ó',
                description: '–ì–æ–¥–∏–Ω–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è',
                price: 100.00
            }
        }),
        prisma.service.create({
            data: {
                name: '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É',
                description: '–†—ñ—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É',
                price: 300.00
            }
        }),
    ]);
    console.log('üîß Created services');
    // Create counterparties
    const counterparties = await Promise.all([
        prisma.counterparty.create({
            data: {
                name: '–¢–û–í "–†–æ–º–∞—à–∫–∞"',
                counterparty_type: 'LEGAL_ENTITY',
                responsible_manager_id: managers[1].manager_id, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
            }
        }),
        prisma.counterparty.create({
            data: {
                name: '–§–û–ü –°–∏–¥–æ—Ä–µ–Ω–∫–æ',
                counterparty_type: 'INDIVIDUAL',
                responsible_manager_id: managers[2].manager_id, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
            }
        }),
        prisma.counterparty.create({
            data: {
                name: '–¢–û–í "–ú—Ä—ñ—è"',
                counterparty_type: 'LEGAL_ENTITY',
                responsible_manager_id: managers[3].manager_id, // –û–ª–µ–≥ –°–∏–¥–æ—Ä–µ–Ω–∫–æ
            }
        }),
    ]);
    console.log('üè¢ Created counterparties');
    // Create funnels
    const funnels = await Promise.all([
        prisma.funnel.create({ data: { name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø—Ä–æ–¥–∞–∂' } }),
        prisma.funnel.create({ data: { name: '–†–æ–∑—Ä–æ–±–∫–∞ –ü–ó' } }),
    ]);
    console.log('üîÑ Created funnels');
    // Create funnel stages
    const funnelStages = await Promise.all([
        // Stages for Funnel 1 (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø—Ä–æ–¥–∞–∂)
        prisma.funnelStage.create({ data: { name: '–ù–æ–≤–∏–π', funnel_id: funnels[0].funnel_id, order: 1 } }),
        prisma.funnelStage.create({ data: { name: '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è', funnel_id: funnels[0].funnel_id, order: 2 } }),
        prisma.funnelStage.create({ data: { name: '–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', funnel_id: funnels[0].funnel_id, order: 3 } }),
        prisma.funnelStage.create({ data: { name: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∏', funnel_id: funnels[0].funnel_id, order: 4 } }),
        prisma.funnelStage.create({ data: { name: '–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', funnel_id: funnels[0].funnel_id, order: 5 } }),
        prisma.funnelStage.create({ data: { name: '–ü—Ä–æ–≥—Ä–∞–Ω–æ', funnel_id: funnels[0].funnel_id, order: 6 } }),
        // Stages for Funnel 2 (–†–æ–∑—Ä–æ–±–∫–∞ –ü–ó)
        prisma.funnelStage.create({ data: { name: '–ê–Ω–∞–ª—ñ–∑ –≤–∏–º–æ–≥', funnel_id: funnels[1].funnel_id, order: 1 } }),
        prisma.funnelStage.create({ data: { name: '–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è', funnel_id: funnels[1].funnel_id, order: 2 } }),
        prisma.funnelStage.create({ data: { name: '–†–æ–∑—Ä–æ–±–∫–∞', funnel_id: funnels[1].funnel_id, order: 3 } }),
        prisma.funnelStage.create({ data: { name: '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è', funnel_id: funnels[1].funnel_id, order: 4 } }),
        prisma.funnelStage.create({ data: { name: '–†–µ–ª—ñ–∑', funnel_id: funnels[1].funnel_id, order: 5 } }),
    ]);
    console.log('üìã Created funnel stages');
    // Create projects
    const projects = await Promise.all([
        prisma.project.create({
            data: {
                name: '–†–æ–∑—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç—É',
                description: '–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É—á–∞—Å–Ω–∏–π —Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –≤–µ–±-—Å–∞–π—Ç –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏.',
                main_responsible_manager_id: managers[2].manager_id, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
                counterparty_id: counterparties[0].counterparty_id, // –¢–û–í "–†–æ–º–∞—à–∫–∞"
                forecast_amount: 5000,
                funnel_id: funnels[1].funnel_id, // –†–æ–∑—Ä–æ–±–∫–∞ –ü–ó
                funnel_stage_id: funnelStages[8].funnel_stage_id, // –†–æ–∑—Ä–æ–±–∫–∞
            }
        }),
        prisma.project.create({
            data: {
                name: '–ü—Ä–æ–¥–∞–∂ –ø–∞—Ä—Ç—ñ—ó —Å–µ—Ä–≤–µ—Ä—ñ–≤',
                description: '–ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è 10 —Å–µ—Ä–≤–µ—Ä—ñ–≤ Dell PowerEdge –¥–ª—è –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä—É –∫–ª—ñ—î–Ω—Ç–∞.',
                main_responsible_manager_id: managers[1].manager_id, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
                counterparty_id: counterparties[1].counterparty_id, // –§–û–ü –°–∏–¥–æ—Ä–µ–Ω–∫–æ
                forecast_amount: 15000,
                funnel_id: funnels[0].funnel_id, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø—Ä–æ–¥–∞–∂
                funnel_stage_id: funnelStages[2].funnel_stage_id, // –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è
            }
        }),
        prisma.project.create({
            data: {
                name: '–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è CRM',
                description: '',
                main_responsible_manager_id: managers[2].manager_id, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
                counterparty_id: counterparties[0].counterparty_id, // –¢–û–í "–†–æ–º–∞—à–∫–∞"
                forecast_amount: 8000,
                funnel_id: funnels[1].funnel_id, // –†–æ–∑—Ä–æ–±–∫–∞ –ü–ó
                funnel_stage_id: funnelStages[6].funnel_stage_id, // –ê–Ω–∞–ª—ñ–∑ –≤–∏–º–æ–≥
            }
        }),
    ]);
    console.log('üìÅ Created projects');
    // Set up secondary responsible managers for projects
    await prisma.projectManager.createMany({
        data: [
            { project_id: projects[0].project_id, manager_id: managers[1].manager_id }, // Project 1 - –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
            { project_id: projects[2].project_id, manager_id: managers[1].manager_id }, // Project 3 - –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
            { project_id: projects[2].project_id, manager_id: managers[3].manager_id }, // Project 3 - –û–ª–µ–≥ –°–∏–¥–æ—Ä–µ–Ω–∫–æ
        ]
    });
    console.log('üë• Set up secondary project managers');
    // Create subprojects
    const subprojects = await Promise.all([
        prisma.subProject.create({
            data: {
                name: '–î–∏–∑–∞–π–Ω UI/UX',
                project_id: projects[0].project_id,
                status: '–í –ø—Ä–æ—Ü–µ—Å—ñ',
                cost: 1500,
                description: '–†–æ–∑—Ä–æ–±–∫–∞ –º–∞–∫–µ—Ç—ñ–≤ —Ç–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Å–∞–π—Ç—É.',
            }
        }),
    ]);
    console.log('üìã Created subprojects');
    // Create tasks
    const tasks = await Promise.all([
        prisma.task.create({
            data: {
                title: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞–∫–µ—Ç –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏',
                description: '–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–∏–∑–∞–π–Ω—É',
                responsible_manager_id: managers[2].manager_id, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
                creator_manager_id: managers[1].manager_id, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
                project_id: projects[0].project_id,
                subproject_id: subprojects[0].subproject_id,
                due_date: new Date('2024-08-15'),
            }
        }),
        prisma.task.create({
            data: {
                title: '–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é',
                description: '',
                responsible_manager_id: managers[1].manager_id, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
                creator_manager_id: managers[0].manager_id, // Admin
                project_id: projects[1].project_id,
                subproject_id: null,
                due_date: new Date('2024-08-10'),
            }
        }),
    ]);
    console.log('‚úÖ Created tasks');
    // Create project products
    await prisma.projectProduct.create({
        data: {
            project_id: projects[0].project_id,
            product_id: products[1].product_id, // –ú–∏—à–∞ Wireless X
            quantity: 3
        }
    });
    console.log('üì¶ Created project products');
    // Create project services
    await prisma.projectService.create({
        data: {
            project_id: projects[0].project_id,
            service_id: services[0].service_id, // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –ü–ó
        }
    });
    console.log('üîß Created project services');
    // Create project comments
    await Promise.all([
        prisma.projectComment.create({
            data: {
                project_id: projects[0].project_id,
                manager_id: managers[1].manager_id, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
                content: '–ü—Ä–æ–ø–æ–Ω—É—é —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –¥–∏–∑–∞–π–Ω—É. –Ø–∫—ñ —î —ñ–¥–µ—ó?',
                created_at: new Date('2024-07-28T10:00:00Z'),
            }
        }),
        prisma.projectComment.create({
            data: {
                project_id: projects[0].project_id,
                manager_id: managers[2].manager_id, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
                content: '–ü—ñ–¥—Ç—Ä–∏–º—É—é. –Ø –≤–∂–µ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∞ –∫—ñ–ª—å–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ñ–≤, –∑–∞—Ä–∞–∑ –Ω–∞–¥—ñ—à–ª—é.',
                created_at: new Date('2024-07-28T10:05:00Z'),
            }
        }),
    ]);
    console.log('üí¨ Created project comments');
    // Create subproject comments
    await prisma.subProjectComment.create({
        data: {
            subproject_id: subprojects[0].subproject_id,
            manager_id: managers[2].manager_id, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
            content: '–î–∏–∑–∞–π–Ω –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, –º–æ–∂–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏ –≤–µ—Ä—Å—Ç–∫—É.',
            created_at: new Date('2024-07-29T14:00:00Z'),
        }
    });
    console.log('üí¨ Created subproject comments');
    // Create sales
    const sales = await Promise.all([
        prisma.sale.create({
            data: {
                counterparty_id: counterparties[0].counterparty_id, // –¢–û–í "–†–æ–º–∞—à–∫–∞"
                responsible_manager_id: managers[1].manager_id, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
                sale_date: new Date('2024-05-20'),
                status: '–û–ø–ª–∞—á–µ–Ω–æ',
                deferred_payment_date: null,
                project_id: projects[0].project_id,
            }
        }),
        prisma.sale.create({
            data: {
                counterparty_id: counterparties[1].counterparty_id, // –§–û–ü –°–∏–¥–æ—Ä–µ–Ω–∫–æ
                responsible_manager_id: managers[2].manager_id, // –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞
                sale_date: new Date('2024-05-22'),
                status: '–í—ñ–¥—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞',
                deferred_payment_date: new Date('2024-06-30'),
                project_id: null,
            }
        }),
        prisma.sale.create({
            data: {
                counterparty_id: counterparties[0].counterparty_id, // –¢–û–í "–†–æ–º–∞—à–∫–∞"
                responsible_manager_id: managers[1].manager_id, // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
                sale_date: new Date(),
                status: '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
                deferred_payment_date: null,
                project_id: null,
            }
        }),
    ]);
    console.log('üí∞ Created sales');
    // Create sale products
    await Promise.all([
        prisma.saleProduct.create({
            data: {
                sale_id: sales[0].sale_id,
                product_id: products[0].product_id, // –ù–æ—É—Ç–±—É–∫ Pro 15
                quantity: 1
            }
        }),
        prisma.saleProduct.create({
            data: {
                sale_id: sales[0].sale_id,
                product_id: products[1].product_id, // –ú–∏—à–∞ Wireless X
                quantity: 2
            }
        }),
        prisma.saleProduct.create({
            data: {
                sale_id: sales[1].sale_id,
                product_id: products[1].product_id, // –ú–∏—à–∞ Wireless X
                quantity: 5
            }
        }),
        prisma.saleProduct.create({
            data: {
                sale_id: sales[2].sale_id,
                product_id: products[0].product_id, // –ù–æ—É—Ç–±—É–∫ Pro 15
                quantity: 2
            }
        }),
    ]);
    console.log('üì¶ Created sale products');
    // Create sale services
    await Promise.all([
        prisma.saleService.create({
            data: {
                sale_id: sales[0].sale_id,
                service_id: services[0].service_id, // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –ü–ó
            }
        }),
        prisma.saleService.create({
            data: {
                sale_id: sales[1].sale_id,
                service_id: services[1].service_id, // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É
            }
        }),
    ]);
    console.log('üîß Created sale services');
    console.log('‚úÖ Database seeding completed successfully!');
}
main()
    .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
})
    .finally(async () => {
    await prisma.$disconnect();
});
//# sourceMappingURL=seed.js.map