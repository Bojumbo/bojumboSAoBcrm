export interface UploadResult {
  fileName: string;
  fileUrl: string;
  fileType: string;
}

export class UploadService {
  private static API_BASE_URL = 'http://localhost:3001/api';

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   * @returns —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  static checkAuthStatus(): { hasToken: boolean; tokenSources: string[]; tokenValue?: string } {
    const sources: string[] = [];
    let token: string | null = null;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
    if (localStorage.getItem('auth_token')) {
      sources.push('localStorage: auth_token');
      token = localStorage.getItem('auth_token');
    }
    if (localStorage.getItem('authToken')) {
      sources.push('localStorage: authToken');
      token = token || localStorage.getItem('authToken');
    }
    if (localStorage.getItem('token')) {
      sources.push('localStorage: token');
      token = token || localStorage.getItem('token');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ cookies
    const cookies = document.cookie.split(';');
    const authCookie = cookies.find(cookie => cookie.trim().startsWith('auth_token='));
    if (authCookie) {
      sources.push('cookies: auth_token');
      token = token || authCookie.split('=')[1];
    }

    return {
      hasToken: !!token,
      tokenSources: sources,
      tokenValue: token ? `${token.substring(0, 10)}...` : undefined
    };
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   * @param file - —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
   * @returns –æ–±—ñ—Ü—è–Ω–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª
   */
  static async uploadFile(file: File): Promise<UploadResult> {
    try {
      const token = this.getAuthToken();
      console.log('Upload file - token found:', !!token);
      
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch(`${this.API_BASE_URL}/upload`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData,
      });

      console.log('Upload response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Upload failed:', errorText);
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const result = await response.json();
      
      if (result.success) {
        return result.data;
      } else {
        throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
      throw error;
    }
  }

  /**
   * –í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞
   * @param fileUrl - URL —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
   * @returns –æ–±—ñ—Ü—è–Ω–∫–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
   */
  static async deleteFile(fileUrl: string): Promise<boolean> {
    try {
      const token = this.getAuthToken();
      
      const response = await fetch(`${this.API_BASE_URL}/upload`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ fileUrl }),
      });

      if (!response.ok) {
        return false;
      }

      const result = await response.json();
      return result.success;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
      return false;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
   * @param file - —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   * @param maxSizeInMB - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤ –ú–ë (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è)
   * @returns true —è–∫—â–æ —Ñ–∞–π–ª –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
   */
  static validateFileSize(file: File, maxSizeInMB?: number): boolean {
    if (!maxSizeInMB) return true; // –ë–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
    const maxSizeInBytes = maxSizeInMB * 1024 * 1024;
    return file.size <= maxSizeInBytes;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∏–ø —Ñ–∞–π–ª—É
   * @param file - —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   * @param allowedTypes - –¥–æ–ø—É—Å—Ç–∏–º—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
   * @returns true —è–∫—â–æ —Ç–∏–ø —Ñ–∞–π–ª—É –¥–æ–ø—É—Å—Ç–∏–º–∏–π
   */
  static validateFileType(file: File, allowedTypes?: string[]): boolean {
    const defaultAllowedTypes = [
      'image/jpeg',
      'image/png',
      'image/gif',
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'text/plain'
    ];

    const typesToCheck = allowedTypes || defaultAllowedTypes;
    return typesToCheck.includes(file.type);
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   * @param bytes - —Ä–æ–∑–º—ñ—Ä –≤ –±–∞–π—Ç–∞—Ö
   * @returns —Ä—è–¥–æ–∫ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º
   */
  static formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Ç–∏–ø —ñ–∫–æ–Ω–∫–∏ –¥–ª—è —Ñ–∞–π–ª—É
   * @param fileName - –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É
   * @returns —Ä—è–¥–æ–∫ –∑ —ñ–∫–æ–Ω–∫–æ—é
   */
  static getFileIcon(fileName: string): string {
    const extension = fileName.split('.').pop()?.toLowerCase();
    
    switch (extension) {
      case 'pdf':
        return 'üìÑ';
      case 'doc':
      case 'docx':
        return 'üìù';
      case 'xls':
      case 'xlsx':
        return 'üìä';
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
        return 'üñºÔ∏è';
      case 'txt':
        return 'üìã';
      default:
        return 'üìé';
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   * @returns JWT —Ç–æ–∫–µ–Ω
   */
  private static getAuthToken(): string {
    // –°–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–∑–≤ —Ç–æ–∫–µ–Ω–∞
    let token = localStorage.getItem('auth_token') || 
                localStorage.getItem('authToken') || 
                localStorage.getItem('token');
    
    // –¢–∞–∫–æ–∂ —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ cookies
    if (!token) {
      const cookies = document.cookie.split(';');
      const authCookie = cookies.find(cookie => cookie.trim().startsWith('auth_token='));
      if (authCookie) {
        token = authCookie.split('=')[1];
      }
    }
    
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–Ω–æ–≤—É.');
    }
    
    return token;
  }
}